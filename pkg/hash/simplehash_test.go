package hash_test

import (
	"testing"

	pb "github.com/DanialDMQ/Goob/pkg/autogenerated"
	"github.com/DanialDMQ/Goob/pkg/hash"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

type simpleHashSuite struct {
	suite.Suite
	hasher hash.Hash
}

func (s *simpleHashSuite) SetupTest() {
	s.hasher = hash.NewSimpleHash()
}

func TestSimpleHashSuite(t *testing.T) {
	suite.Run(t, new(simpleHashSuite))
}

func (s *simpleHashSuite) TestGetRecord() {
	testTable := []struct {
		nonce          int64
		request        *pb.MinerRequest
		expectedRecord string
	}{
		{
			1,
			&pb.MinerRequest{Src: "dan", Dest: "iyal", Amount: 1, DateTime: 1, PrevHash: "1"},
			"daniyal1111",
		},
		{
			2,
			&pb.MinerRequest{Src: "eh", Dest: "san", Amount: 2, DateTime: 2, PrevHash: "2"},
			"ehsan2222",
		},
	}
	for _, tt := range testTable {
		record, _ := s.hasher.GetRecord(tt.request, tt.nonce)
		assert.Equal(s.T(), record, tt.expectedRecord)
	}

}

func (s *simpleHashSuite) TestGetSha256() {
	testTable := []struct {
		record       string
		hashedRecord string
	}{
		{"foo", "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae"},
		{"bar", "fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9"},
	}
	for _, tt := range testTable {
		hashedRecrod, _ := s.hasher.GetSha256(tt.record)
		assert.Equal(s.T(), hashedRecrod, tt.hashedRecord)
	}
}

func benchmarkGetRecord(params *pb.MinerRequest, b *testing.B) {
	hasher := hash.NewSimpleHash()
	for n := 0; n < b.N; n++ {
		hasher.GetRecord(params, 1)
	}
}

func BenchmarkGetRecordNoParams(b *testing.B) {
	params := &pb.MinerRequest{}
	benchmarkGetRecord(params, b)
}

func BenchmarkGetRecordSimpleParams(b *testing.B) {
	params := &pb.MinerRequest{Src: "dan", Dest: "iyal", Amount: 1, DateTime: 1, PrevHash: "1"}
	benchmarkGetRecord(params, b)
}

func BenchmarkGetRecordComplexParams(b *testing.B) {
	params := &pb.MinerRequest{
		Src: "foo", Dest: "bar", Amount: 1234, DateTime: 20211010,
		PrevHash: "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2"}
	benchmarkGetRecord(params, b)
}

func benchmarkGetSha256(record string, b *testing.B) {
	hasher := hash.NewSimpleHash()
	for n := 0; n < b.N; n++ {
		hasher.GetSha256(record)
	}
}

func BenchmarkGetSha256EmptyRecord(b *testing.B) {
	record := ""
	benchmarkGetSha256(record, b)
}

func BenchmarkGetSha256SimpleRecord(b *testing.B) {
	record := "foo bar"
	benchmarkGetSha256(record, b)
}

func BenchmarkGetSha256ComplexRecord(b *testing.B) {
	record := "c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2"
	benchmarkGetSha256(record, b)
}
